/**
 * This module provides meta-predicates to distribute work over multiple
 * threads. The simplest meta-predicate horde/[1,2] collects the results
 * of the spawned threads and leaves the work distribution to the spawned
 * threads itself. The other predicates distribute work items among the
 * spawned threads, but do this only on a local scale.
 *
 * Example:
 * ?- balance(X^(between(1,10,X), Y is X*X)).
 * Y = 1 ;
 * Y = 9 ;
 * Etc..
 *
 * The meta-predicates balance/[2,3] and setup_balance/[3,4] allow work
 * distribution of a generate and test. The meta-predicates might change
 * the order of the result set. If the meta-predicates are cancelled by
 * a cut such as in a surrounding \+/1 or once/1 they will automatically
 * cancel each spawned thread.
 *
 * The meta-predicates balance/[2,3] and setup_balance/[3,4] assume a
 * side effect free interaction between the generate and test. The only
 * channels are the variables in the intersection of the generate and
 * test and the instantiations are copied. Currently the copying
 * doesn't support attribute variables.
 *
 * The setup in the meta-predicates setup_balance/[3,4] is executed once
 * per spawned thread. The setup is executed before the test and attribute
 * variables can communicate between the setup and the test. The setup
 * can for example be used to build a CLP(FD) model and the model will
 * be available in the test for labelling.
 *
 * Warranty & Liability
 * To the extent permitted by applicable law and unless explicitly
 * otherwise agreed upon, XLOG Technologies GmbH makes no warranties
 * regarding the provided information. XLOG Technologies GmbH assumes
 * no liability that any problems might be solved with the information
 * provided by XLOG Technologies GmbH.
 *
 * Rights & License
 * All industrial property rights regarding the information - copyright
 * and patent rights in particular - are the sole property of XLOG
 * Technologies GmbH. If the company was not the originator of some
 * excerpts, XLOG Technologies GmbH has at least obtained the right to
 * reproduce, change and translate the information.
 *
 * Reproduction is restricted to the whole unaltered document. Reproduction
 * of the information is only allowed for non-commercial uses. Selling,
 * giving away or letting of the execution of the library is prohibited.
 * The library can be distributed as part of your applications and libraries
 * for execution provided this comment remains unchanged.
 *
 * Restrictions
 * Only to be distributed with programs that add significant and primary
 * functionality to the library. Not to be distributed with additional
 * software intended to replace any components of the library.
 *
 * Trademarks
 * Jekejeke is a registered trademark of XLOG Technologies GmbH.
 */

:- package(library(jekpro/reference/runtime)).

:- module(distributed, []).
:- use_module(library(advanced/arith)).
:- use_module(library(misc/pipe)).
:- use_module(library(system/group)).
:- use_module(library(system/thread)).

/**
 * horde(V1^..Vn^T):
 * horde(V1^..Vn^T, N):
 * The predicate succeeds whenever T succeeds. The predicate
 * spawns threads over the available processors running
 * copies of T. The binary predicate allows specifying the
 * number N of requested threads.
 */
% horde(+Quant)
:- public horde/1.
:- meta_predicate horde(0).
horde(T) :-
   current_prolog_flag(sys_cpu_count, N),
   horde(T, N).
% horde(+Quant, +Integer)
:- public horde/2.
:- meta_predicate horde(0, ?).
horde(T, N) :-
   sys_goal_globals(T, J),
   sys_goal_kernel(T, S),
   sys_group_clean(Z),
   horde2(Z, J, S, N).

% horde2(+Group, +List, +Goal, +Integer)
:- private horde2/4.
:- meta_predicate horde2(?, ?, 0, ?).
horde2(Z, J, S, N) :-
   pipe_new(N, B),
   sys_thread_inits(Z, sys_put_all(J, S, B, 1), N),
   sys_take_all(J, B, N).

/**
 * balance(V1^..Vn^(G, T)):
 * balance(V1^..Vn^(G, T), N):
 * The predicate succeeds whenever G, T succeeds. The predicate
 * distributes the work generated by G over the available processors
 * running copies of T. The ternary predicate allows specifying the
 * number N of requested threads.
 */
% balance(+Quant)
:- public balance/1.
:- meta_predicate balance(0).
balance(P) :-
   current_prolog_flag(sys_cpu_count, N),
   balance(P, N).
% balance(+Quant, +Integer)
:- public balance/2.
:- meta_predicate balance(0, ?).
balance(P, N) :-
   sys_goal_globals(P, J),
   sys_goal_kernel(P, (G, T)),
   term_variables(G, I),
   pipe_new(N, F),
   sys_group_clean(Z),
   sys_thread_init(Z, sys_put_all(I, G, F, N)),
   horde2(Z, J, (sys_take_all(I, F, 1), T), N).

/**
 * setup_balance(V1^..Vn^(S, G, T)):
 * setup_balance(V1^..Vn^(S, G, T), N):
 * The predicate succeeds whenever S, G, T succeeds. The predicate
 * distributes the work generated by G over the available processors
 * running copies of S, T. The ternary predicate allows specifying the
 * number N of requested threads.
 */
% setup_balance(+Quant)
:- public setup_balance/1.
:- meta_predicate setup_balance(0).
setup_balance(Q) :-
   current_prolog_flag(sys_cpu_count, N),
   setup_balance(Q, N).
% setup_balance(+Quant, +Integer)
:- public setup_balance/2.
:- meta_predicate setup_balance(0, ?).
setup_balance(Q, N) :-
   sys_goal_globals(Q, J),
   sys_goal_kernel(Q, (S, G, T)),
   term_variables(G, I),
   pipe_new(N, F),
   sys_group_clean(Z),
   sys_thread_init(Z, sys_put_all(I, G, F, N)),
   horde2(Z, J, (S, sys_take_all(I, F, 1), T), N).

/**
 * submit(C, N):
 * The predicate succeeds in running a copy of the goal C in a new
 * thread and unifies N with its new name.
 */
:- public submit/2.
:- meta_predicate submit(0, ?).
submit(Goal, Name) :-
   thread_new(sys_managed_call(Goal), Thread),
   current_thread_flag(Thread, sys_thread_name, Name),
   thread_start(Thread).

/**
 * cancel(N):
 * The predicate succeeds in stopping the thread with the name N.
 */
:- public cancel/1.
cancel(Name) :-
   current_thread(Thread),
   current_thread_flag(Thread, sys_thread_name, Name), !,
   sys_thread_fini(Thread).

/**********************************************************/
/* Pipe Utilities                                         */
/**********************************************************/

/**
 * sys_take_all(T, Q, N):
 * The predicate succeeds for all elements T of the queue Q.
 */
% sys_take_all(+Term, +Queue, +Integer)
:- private sys_take_all/3.
sys_take_all(T, Q, N) :-
   between(1, N, _),
   sys_take_all2(T, Q).

% sys_take_all2(+Term, +Queue)
:- private sys_take_all2/2.
sys_take_all2(T, Q) :-
   repeat,
   pipe_take(Q, A),
   (  A = the(S) -> S = T
   ;  A = ball(E) -> sys_raise(E)
   ;  !, fail).

/**
 * sys_put_all(T, G, Q, N):
 * The predicate succeeds with all elements T in the queue Q that satisfy G.
 */
% sys_put_all(+Term, +Goal, +Queue, +Integer)
:- private sys_put_all/4.
:- meta_predicate sys_put_all(?, 0, ?, ?).
sys_put_all(T, G, Q, N) :-
   sys_trap(sys_put_all2(T, G, Q, N),
      E,
      (  sys_error_type(E, system_error(_)) -> sys_raise(E)
      ;  pipe_put(Q, ball(E)))).

% sys_put_all2(+Term, +Goal, +Queue, +Integer)
:- private sys_put_all2/4.
:- meta_predicate sys_put_all2(?, 0, ?, ?).
sys_put_all2(T, G, Q, _) :-
   G,
   pipe_put(Q, the(T)),
   fail.
sys_put_all2(_, _, Q, N) :-
   between(1, N, _),
   pipe_put(Q, no),
   fail.
sys_put_all2(_, _, _, _).

/**********************************************************/
/* Group Utilities                                        */
/**********************************************************/

/**
 * sys_group_clean(G):
 * The predicate succeeds to create a new group G, and
 * also installs a clean-up handler to cancel the threads
 * of the group.
 */
% sys_group_clean(-Group)
:- private sys_group_clean/1.
:- meta_predicate sys_group_clean(?).
sys_group_clean(G) :-
   sys_atomic((group_new(G),
      sys_cleanup(sys_group_fini(G)))).

/**
 * sys_group_fini(G):
 * The predicate succeeds to abort and join the group G.
 */
% sys_group_fini(+Group)
:- private sys_group_fini/1.
sys_group_fini(Group) :- group_thread(Group, Thread), !,
   sys_thread_fini(Thread),
   sys_group_fini(Group).
sys_group_fini(_).

/**
 * sys_thread_fini(T):
 * The predicate succeeds to abort and join the thread T.
 */
% sys_thread_fini(+Thread)
:- private sys_thread_fini/1.
sys_thread_fini(Thread) :-
   thread_abort(Thread, system_error(user_close)),
   thread_join(Thread).

/**********************************************************/
/* Thread Utilities                                       */
/**********************************************************/

/**
 * sys_thread_init(G, C):
 * The predicate succeeds to create and start a new thread
 * for a copy of the goal C in the group G.
 */
% sys_thread_init(+Group, +Goal)
:- private sys_thread_init/2.
:- meta_predicate sys_thread_init(?, 0).
sys_thread_init(Group, Goal) :-
   thread_new(Group, sys_managed_call(Goal), Thread),
   thread_start(Thread).

/**
 * sys_thread_inits(G, C, N):
 * The predicate succeeds to create and start a new thread
 * for a copy of the goal C in the group G for as many as N times.
 */
% sys_thread_inits(+Group, +Goal, +Integer)
:- private sys_thread_inits/3.
:- meta_predicate sys_thread_inits(?, 0, ?).
sys_thread_inits(_, _, 0) :- !.
sys_thread_inits(Group, Goal, N) :- N > 0,
   sys_thread_init(Group, Goal),
   M is N-1,
   sys_thread_inits(Group, Goal, M).

/****************************************************************/
/* Thread Managed                                               */
/****************************************************************/

% sys_managed_call(+Goal)
:- private sys_managed_call/1.
:- meta_predicate sys_managed_call(0).
sys_managed_call(G) :-
   setup_call_cleanup(sys_managed_start, G, sys_managed_end).

% sys_managed_start
:- private sys_managed_start/0.
sys_managed_start :-
   thread_current(Thread),
   current_thread_flag(Thread, sys_thread_group, Group),
   current_group_flag(Group, sys_group_thread, Thread2),
   Thread2 \== null, !,
   statistics(sys_time_self, T1),
   statistics(sys_time_managed, T2),
   T is -T1-T2,
   sys_managed_add(Thread2, T).
sys_managed_start.

% sys_managed_end
:- private sys_managed_end/0.
sys_managed_end :-
   thread_current(Thread),
   current_thread_flag(Thread, sys_thread_group, Group),
   current_group_flag(Group, sys_group_thread, Thread2),
   Thread2 \== null, !,
   statistics(sys_time_self, T1),
   statistics(sys_time_managed, T2),
   T is T1+T2,
   sys_managed_add(Thread2, T).
sys_managed_end.
